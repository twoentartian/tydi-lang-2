//// Lex ////
LINE_COMMENT = _{ "//" ~  (!(NEWLINE | EOI) ~ ANY)* ~ (NEWLINE | EOI)}
BLOCK_COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
COMMENT = _{ LINE_COMMENT | BLOCK_COMMENT }
WHITESPACE = _{ " " | "\t" | "\r" | "\n"}

//// Document ////
DOCUMENT_CONTENT = { (!"#" ~ ANY)* }
DOCUMENT = _{ ( ("#")+ ~ DOCUMENT_CONTENT ~ ("#")+ )? }

//// Attribute ////
ATTRIBUTE = @{ "@" ~ ID }

//// Basic values ////
INT_RAW_NORAML = @{ ASCII_DIGIT  ~ (ASCII_DIGIT | "_")* ~ !(ASCII_DIGIT | "_")}
INT_RAW_HEX = @{ "0x" ~ ASCII_HEX_DIGIT  ~ (ASCII_HEX_DIGIT | "_")* ~ !(ASCII_HEX_DIGIT | "_")}
INT_RAW_BIN = @{ "0b" ~ ASCII_BIN_DIGIT  ~ (ASCII_BIN_DIGIT | "_")* ~ !(ASCII_BIN_DIGIT | "_")}
INT_RAW_OCT = @{ "0o" ~ ASCII_OCT_DIGIT  ~ (ASCII_OCT_DIGIT | "_")* ~ !(ASCII_OCT_DIGIT | "_")}
INT = { (INT_RAW_BIN | INT_RAW_OCT | INT_RAW_HEX | INT_RAW_NORAML) ~ !(ASCII_DIGIT | ".") }
BOOL = @{ ("true" | "false") ~ !(ASCII_ALPHA | ASCII_DIGIT | "_") }
FLOAT = @{ ('1'..'9' ~ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT*) | ("0" ~ "." ~ ASCII_DIGIT*) ~ !(ASCII_DIGIT) }
CHAR = @{ ' '..'!' | '#'..'[' | ']'..'~' | "\\\t" | "\\n" | "\\t" | "\\\\"}
STRING = @{ "\"" ~ CHAR* ~ "\"" }

//// ID ////
ID_BLOCK_LIST = { !(("impl" | "streamlet" | "int" | "string" | "bool" | "float" | "instance" | "in" | "out") ~ (!( ASCII_ALPHA | ASCII_DIGIT | "_" )) )}
ID_BLOCK_CHAR = { !( WHITESPACE ) } //empty ID
ID = @{ ID_BLOCK_LIST ~ (ID_BLOCK_CHAR ~ ( ASCII_ALPHA | "_" )) ~ (ID_BLOCK_CHAR ~ ( ASCII_ALPHA | ASCII_DIGIT | "_" ))*  ~ !(ASCII_ALPHA | ASCII_DIGIT | "_") }
EndOfId = _{ !(ASCII_ALPHA | ASCII_DIGIT) }

//// Basic types ////
IntTypeKeyword = { "int" }
StringTypeKeyword = { "string" }
BoolTypeKeyword = { "bool" }
FloatTypeKeyword = { "float" }
ClockDomainTypeKeyword = { "clock" }
LogicalTypeKeyword = { "type" }
StreamletKeyword = { "streamlet" }
ImplementationKeyword = {"impl" ~ "of" ~ GlobalIdentifier }  //BUG here

BasicTypeKeyword = { (IntTypeKeyword | StringTypeKeyword | BoolTypeKeyword | FloatTypeKeyword | ClockDomainTypeKeyword | LogicalTypeKeyword) ~ EndOfId }
BasicTypeKeywordArray = { "[" ~ BasicTypeKeyword ~ "]" }
AllTypeKeyword = { BasicTypeKeywordArray | BasicTypeKeyword | StreamletKeyword | ImplementationKeyword }

IntExp = { INT }
StringExp = { STRING }
BoolExp = { BOOL }
FloatExp = { FLOAT }

//// Expression ////
ArrayExp = { "[" ~ Exp ~ ("," ~ Exp)* ~ "]" }
// ArrayRange = { "(" ~ Exp ~ "=" ~ Exp ~ "=>" ~ Exp ~ ")" }
ArraySizeIndicator = { "[" ~ Exp? ~ "]" } //specifying the size of the array is optional

IdentifierExp = { ID }
FunctionExp = { ID ~ "(" ~ (Exp ~ ( "," ~ Exp )*)? ~ ")" }
IndexExp = { ID ~ "[" ~ Exp ~ "]" }
Term_identifier = { FunctionExp | IndexExp | IdentifierExp }

IdentifierWithArgExp = { Term_identifier ~ ("<" ~ Exp ~ ("," ~ Exp)* ~ ">")? }
UnaryExp = { UnaryOp ~ Term }
UnaryOp = _{ OP_UnaryMinus | OP_UnaryNot  }
    OP_UnaryMinus = { "-" }
    OP_UnaryNot = { "!" }

Term = { ( "(" ~ Exp ~ ")" ) |
            /*ArrayRange |*/ ArrayExp | IntExp | StringExp | BoolExp | FloatExp | 
            IdentifierWithArgExp | 
            UnaryExp }

GlobalIdentifier = { (Term ~ (OP_AccessInner  ~ Term)*) }
Exp = { LogicalExp | (Term ~ (InfixOp  ~ Term)*) }
InfixOp = _{ 
    OP_AccessInner | OP_AccessProperty |
    OP_LeftShift | OP_RightShift | OP_LogicalAnd | OP_LogicalOr | 
    OP_LogicalEq | OP_LogicalNotEq | OP_GreaterEq | OP_LessEq |
    OP_Greater | OP_Less | OP_Add | OP_Minus | OP_Multiply | OP_Divide | OP_Mod | OP_BitAnd | OP_BitOr | OP_BitXor }
        OP_AccessInner = { "." }
        OP_AccessProperty = { "->" }

        OP_LeftShift = { "<<" }
        OP_RightShift = { ">>" }
        OP_LogicalAnd = { "&&" }
        OP_LogicalOr = { "||" }
        OP_LogicalEq = { "==" }
        OP_LogicalNotEq = { "!=" }
        OP_GreaterEq = { ">=" }
        OP_LessEq = { "<=" }

        OP_Greater = { ">" }
        OP_Less = { "<" }
        OP_Add = { "+" }
        OP_Minus = { "-" }
        OP_Multiply = { "*" }
        OP_Divide = { "/" }
        OP_Mod = { "%" }
        OP_BitAnd = { "&" }
        OP_BitOr = { "|" }
        OP_BitXor = { "^" }

//// Logical types ////
LogicalNull = { "Null" }
LogicalBit = { "Bit" ~ "(" ~ Exp ~ ")" }
LogicalGroup = {
    DOCUMENT ~ 
    "Group" ~ ID ~ TemplateArgs ~ 
        Scope_WithBracket
}
LogicalUnion = {
    DOCUMENT ~ 
    "Union" ~ ID ~ TemplateArgs ~ 
        Scope_WithBracket
}

LogicalStream = { "Stream" ~ "(" ~ Exp ~ StreamProperty* ~ ")" }
StreamProperty = { "," ~ ID ~ "=" ~ Exp }

LogicalType_Basic = { LogicalNull | LogicalBit | LogicalStream | LogicalGroup | LogicalUnion }
LogicalType_Array = { LogicalType_Basic ~ ArraySizeIndicator }
LogicalType = { /*LogicalType_Array |*/ LogicalType_Basic }
LogicalExp = _{ LogicalType }

//// Complex types ////
TypeIndicator_All = { BasicTypeKeyword | LogicalType | Exp }  // LogicalType here is to allow, e.g. Group x { e0 : Bit(8) }
TypeIndicator_Array = { "[" ~ TypeIndicator_All ~ "]" }
TypeIndicator = { ( ":"  ~ (TypeIndicator_All | TypeIndicator_Array) )? }
ValueInitList = _{ ("=" ~ Exp)? }

//// Template common ////
TemplateArgs = { ("<" ~ Arg ~ ("," ~ Arg)* ~ ">")? }
Arg_Common = { ID ~ ":" ~ AllTypeKeyword }
Arg = { Arg_Common }

//// Streamlet ////
StreamLet = {
    DOCUMENT ~
    "streamlet" ~ ID ~ TemplateArgs ~ ATTRIBUTE* ~
        Scope_WithBracket
}

//// Port ////
PortDirectionDirIn = { "in" }
PortDirectionDirOut = { "out" }
PortDirection = { (PortDirectionDirIn | PortDirectionDirOut) }
PortTimeDomain = { ("/" ~ Exp)? }
Port = { 
    DOCUMENT ~ 
    ID ~ ":" ~ Exp ~ PortDirection ~ ArraySizeIndicator? ~ PortTimeDomain ~ ATTRIBUTE*
}

//// Implementation ////
Implementation = { 
    DOCUMENT ~
    "impl" ~ ID ~ TemplateArgs ~ "of" ~ Exp ~ ATTRIBUTE* ~  //attribute: External
        Scope_WithBracket
}

//// Instance ////
Instance = { 
    DOCUMENT ~
    "instance" ~ ID ~ "(" ~ Exp ~ ")" ~ ArraySizeIndicator? ~ ATTRIBUTE*
}

//// Net ////
NetName = { Exp? }
Net = { 
    DOCUMENT ~ 
    Exp ~ "=>" ~ Exp ~ NetName ~ ATTRIBUTE* //attribute: NoTypeCheck
}

//// For ////
For = { 
    "for" ~ ID ~ "in" ~ Exp ~ 
        Scope_WithBracket
}

//// If ////
If = { 
    "if" ~ Exp ~ 
        Scope_WithBracket ~
    Elif* ~
    Else?
}
Elif = { 
    "elif" ~ Exp ~ 
        Scope_WithBracket
}
Else = { 
    "else" ~ 
        Scope_WithBracket
}

//// Statement ////
StatementDeclareVariable = { ID ~ TypeIndicator ~ ValueInitList ~ ";" }
StatementDeclareType = { ID ~ TypeIndicator ~ ";" }
StatementDeclareGroup = { LogicalGroup }
StatementDeclareUnion = { LogicalUnion }
StatementDeclareStreamlet = { StreamLet }
StatementDeclareImplementation = { Implementation }
StatementDeclarePort = { Port ~ ";" }
StatementDeclareInstance = { Instance ~ ";" }
StatementDeclareNet = { Net ~ ";" }
StatementDeclareIf = { If }
StatementDeclareFor = { For }
StatementUsePackage = { "use" ~ ID ~ ";"}
StatementFunction = { FunctionExp ~ ";" }

Statement = _{ StatementDeclareGroup | StatementDeclareUnion | 
    StatementDeclareStreamlet | StatementDeclarePort | StatementDeclareImplementation | StatementDeclareInstance | StatementDeclareNet |
    StatementDeclareIf | StatementDeclareFor | StatementUsePackage | StatementFunction | StatementDeclareType | StatementDeclareVariable }

//// Scope ////
Scope_WithBracket = _{ "{" ~ Scope_WithoutBracket ~ "}" }
Scope_WithoutBracket = { Statement* }

//// File ////
PackageStatement = { "package" ~ ID ~ ";" }
TydiFile = _{ SOI ~ PackageStatement ~ 
    Scope_WithoutBracket ~ 
    EOI }
